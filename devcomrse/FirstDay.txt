기간 : 23년 8월 21일 ~ 24년 1월 26일
단위 기간 : 매달 21 ~ 20일 까지

알고리즘 이야기 - 요약

알고리즘은 중요한가?
  1. 개발자에게 있어서 알고리즘은 사용하는 곳도 별로 없기 때문에 크게 중요하지 않다고 생각하는 사람이 많다.

  2. 실제로 웹 혹은 모바일 서비스와 같이 대부분의 프로그램을 작성할 때 알고리즘을 다룰만한 일은 크게 없다.

  3. 그렇기 때문에 얼핏 중요한 것은 라이브러리, 프레임워크를 잘 다뤄서 서비스를 만들 수 있는 코딩 능력이 중요해보인다. 하지만 실제로 개발자의 핵심이 되는 것은 문제 해결 능력의 기반이 되는 알고리즘이다.

  4. 우리가 언제든지 마음만 먹으면 피부에 화장을 하거나 문신을 새길 수 있는것 처럼 코딩 능력은 책, 웹 문서, 스터디 그룹 등을 통해서 필요할 때 언제든지 배울 수 있다. 하지만 알고리즘은 우리의 골격처럼 뼈에 녹아들어 우리의 논리적 사고, 문제 해결 능력의 기반이 되어준다. 우리가 성장기를 마치면 더이상 키가 자라지 않는 것 처럼 알고리즘도 배워야하는 시기가 따로 있다. 그 기간을 놓치면 알고리즘도 배우기가 힘들어 질 것이다.

  5. 멋지고 어려운 일을 해내는 회사는 특정 프레임워크나 라이브러리에 정통한 사람을 찾지 않는다. 그들은 문제 해결 능력을 갖춘 상태에서 새로운 기술을 빠르게 습득하고 활용할 수 있는 사람을 찾는다.

  6. 논리적인 사람은 좋은 코드를 작성하지만, 논리적 사고가 결핍되어 있는 사람은 아무리 열심히 코딩을 배워도 좋은 코드를 작성하지 못한다.

  7. 그렇기 때문에 개발자의 정체성이 되어줄 기반 지식인 알고리즘을 공부하자.

알고리즘 != 알고리즘 문제?
  1. 알고리즘을 많이 아는 것과 알고리즘 문제를 잘 푸는 것은 다르다.

  2. 알고리즘을 많이 아는 것은 수학 공식을 많이 아는 것과 같고 알고리즘 문제를 잘 푸는 것은 수학 문제를 잘 푸는 것을 의미한다.

  3. 즉 여러 알고리즘을 많이 아는 것은 문제를 푸는 것에 있어서 중요하지만 코딩 테스트에서 가장 중요한 것은 알고리즘을 많이 아는 것이 아닌 당신의 “응용력”을 보는 것이다. 결국 문제 해결 능력이 가장 중요한 것이다.

알고리즘 문제를 푸는 것에 있어서 중요한 것
문제는 여러가지 풀이 방법이 있을 수 있다는 것을 염두해두자

항상 예외가 있음을 잊지 말자

내가 풀어낸 답이 베스트인지 의심하자

앞서 알고리즘 문제 풀이를 수학 문제 푸는 것에 비유한 만큼 알고리즘 기반 지식도 중요하다. 제일 빠르고 쉬운 방법은 책을 읽는 것이고 책은 도저히 못읽겠다면 웹 문서를 통해 기반 지식을 익히자.

다 풀었다면 꼭 어딘가에 어떻게 풀었는지 정리를 하도록하자.

다른 사람의 코드를 많이 보자. 생각하지 못했던 방법을 발견할 수도 있다. 그리고 다른 사람의 코드를 참고하여 내 코드를 개선해보자.

쉽게 포기하지 말자. 최대 3시간까지는 고민해보자. 하지만 도저히 못풀겠다면 다른 사람에게 물어보는 것도 좋은 방법이다.

알고리즘을 재밌게 공부하는 방법
  1. 알고리즘은 수학적 이론에 가깝기 때문에 재미가 없을 수 밖에 없다.

  2. 시각적인 사이트의 도움을 받자

    https://visualgo.net/ko

    https://algorithm-visualizer.org/

    유튜브를 보는 것도 좋은 생각

  3. 공부하는 알고리즘이 어디에 응용될 수 있는지 생각해보면서 공부해보자

    게임에선 알고리즘을 많이 사용한다.

알고리즘 문제를 잘 푸는 방법
  1. 자신의 성향을 잘 파악하는 것이 중요하다.

    미리 생각을 하고나서 푸는게 더 잘풀리는 사람

    일단 코드를 적어야 잘 풀리는 사람

    나는 어떤 사람인가?

  2. 풀다가 뭘하려 했는지 까먹을 수 있다. 코드에 주석을 달거나 노트에 메모하면서 문제를 풀자.

  3. 웬만한 알고리즘은 논리적으로 표현이 가능하다. 헷갈릴때는 순서도를 그리면서 정리해보자.

  4. 내가 예상한대로 동작이 안되는 것 같다면 디버깅을 하자

    로직에 print를 찍어서 값이 정상적으로 나오는지 확인하는 방법

    PDB와 같은 디버거를 사용하는 방법

좋은 코드를 만드는 방법
  1. 간결하고 가독성 좋은 코드를 만들기 위해서는?

    함수형 프로그래밍

      함수형 프로그래밍을 잘 모르더라도 일부 이용할 수 있다.

      Python의 고차함수를 사용해보자

      lambda, map, filter, reduce

      성능에 문제가 생길 수 있다면 무리해서 사용하진 말자

    변수, 함수의 이름을 잘 정했는가?

    중복 코드를 제거했는가?

  2. 가지치기를 했는가?

    흔히 가지치기는 백트래킹과 같은 알고리즘 기법에서 쓰는 말이지만 그 외 알고리즘에서도 중요한 기술이다.

    일반적으로 같은 빅오로 표현될 수 있는 로직이면 크게 성능이 개선되지는 않지만 개발자로써 좋은 코드를 짜는 것도 중요하고 프로그래머스의 채점 방식은 꽤 엄격하니 낭비되고 있는 로직이 있는지 확인해보자.

    각 언어의 장점/특징에 맞는 코드를 작성했는가?

      Python의 장점을 살려서 코드를 작성해보자

    일관성이 있는가?

      코드 스타일이나 변수명을 짓는 스타일에 일관성이 있는지 확인하자

추천 도서
    책정보, 코딩 인터뷰 완전 분석 : 네이버 책

    책정보, 알고리즘 문제 해결 전략 세트 : 네이버 책

    책정보, 누워서 읽는 알고리즘 : 네이버 책

ot 참고
